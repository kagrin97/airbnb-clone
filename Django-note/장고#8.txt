장고 #8


1. 리뷰 평점을 구하고 reviews의 list_display에 나타내자 !

def rating_average(self):
        avg = (
            self.accuracy
            + self.communication
            + self.cleanliness
            + self.location
            + self.check_in
            + self.value
        ) / 6
        return round(avg, 2)
= 리스트 평점을 구하는 함수로 models.py에 들어 있다(여러곳에서 쓰여야 해서 models에 넣는다)
round함수는 몇번쨰 자리까지 보여주는 지를 결정해 준다

2. reviews에 리뷰가 추가 될때마다 rooms의 전체 평점을 갱신해주자

def total_rating(self):
        all_reviews = self.reviews.all()
        all_ratings = 0
        for review in all_reviews:
            all_ratings += review.rating_average()
        if len(all_reviews) > 0:
            return all_ratings / len(all_reviews)
        else:
            return 0
= 리뷰가 추가되면 len의 길이가 1늘어나고 all_ratings에 평점이 더해진다
만약 리뷰가 하나도 없다면 오류가 나서 if문을 써서 대처해 준다

3. Reservation에서 현재 진행중에 있는지 아니면 끝났는지 추가하기

def in_progress(self):
        now = timezone.now().date()
        return now > self.check_in and now < self.check_out
in_progress.boolean = True
    = 현재 시간을 구해주고 현재 시간이 check_in < now < check_out 라면 return
	초기 값을 true 로 설정해줘야한다

def is_finished(self):
        now = timezone.now().date()
        return now > self.check_out
is_finished.boolean = True
= 끝났을 경

4. short_description 이 머지?

count_rooms.short_description = "Number of Rooms"
= 그냥 이름을 바꿔준다고 생각하면 된다

5. photo 업로드 파일 경로 설정하기

MEDIA_ROOT = os.path.join(BASE_DIR, "uploads")
= settings.py 에 추가해 준다 BASE_DIR은 맨위에 있다(airbnb의 절대경로)

6. ImageField를 각각 폴더마다 나눠서 저장해 주기

file = models.ImageField(upload_to="room_photos")
= uploads/room_photos에 file을 저장
avatar = models.ImageField(upload_to="avatars", blank=True)
= uploads/avatars에 file을 저장

7. 라우터를 생성해서 url을 변경해보자

settings.py
MEDIA_URL = "/media/"
= 새롭게 바뀔 url 을 만들어 주자 /가 앞에 붙으면 앞에 있는 url값을 날린다

urls.py
from django.conf import settings = settings 연결(form . import settings 는 안됨 약속임)
from django.conf .urls.static import static = static 라이브러리 사용 (라우터를 만드는 듯)

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
= DEBUG는 true 일때 사용자한테 오류가 뜰때 정확한 오류를 출력해줌 false일떄는 404 같은 오류를 보여줌
= static을 이용해서 url을 /media/폴더명 으로 바꿔줌

8. photo 어드민 패널에 사진을 작게 띄워 주자!

from django.utils.html import mark_safe
= 장고는 url같은 해킹 가능성이 있는 정보를 띄워주지 않는다 mark_safe는 띄워주게 한다 2.2.5ver
rom django.utils.safestring import mark_safe
= 3.1ver

def get_thumbnail(self, obj):
        return mark_safe(f'<img width="50px" src="{obj.file.url}" />')
= url주소를 불러워서 img로 띄워준다

9. host가 너무 많을때 스크롤로 고르지말고 검색해서 고르는 법!

raw_id_fields = ("host",)
= 호스트를 찾을때 검색해서 찾을수가 있다 (전에는 스크롤방식)

10. rooms을 추가할때 rooms에 맞는 사진들을 설정에서 한번에 집어 넣는 방법!

class PhotoInline(admin.TabularInline):

    model = models.Photo

inlines = (PhotoInline,)

= 사진들을 넣는 class를 만들고 inlines로 추가 해준다

11. super() 메소드에 대해서

super().부모클래스의메소드()
= super().는 부모 클래스의 메소드를 실행시켜주는 효과를 가지고 있다

12. 도시 이름의 첫번쨰를 대문자로 바꿔보자

	12.1. Model 에서 처리하기
	- save함수를 override(덮어쓰기) 받아서 처리 (아래는 city의 첫글자를 대문자로 처리)

	def save(self, *args, **kwargs):
        		self.city = str.capitalize(self.city)
       		 super().save(*args, **kwargs)

	12.2. Admin에서 처리
	- model에서 처리하는것과 차이점은 model의 save함수는 model의 데이터를 처리하는것만 가능
	- admin의 save_model은 아래의 예처럼 request, obj, form, change의 객체 값을 사용가능

	def save_model(self, request, obj, form, change):
		로직이 들어가는 부분
		super().save_model(request, obj, form, change)
